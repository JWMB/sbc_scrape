using System;
using System.Collections.Generic;
using System.Text;

namespace MediusFlowAPI.Models.TaskHistory
{
	// <auto-generated />
	//
	// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
	//
	//    using QuickType;
	//
	//    var response = Response.FromJson(jsonString);

	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Response
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Topic")]
		public string Topic { get; set; }

		[JsonProperty("Date")]
		public string Date { get; set; }

		[JsonProperty("Description")]
		public string Description { get; set; }

		[JsonProperty("Level")]
		public string Level { get; set; }

		[JsonProperty("CategoryName")]
		public string CategoryName { get; set; }

		[JsonProperty("Category")]
		public string Category { get; set; }

		[JsonProperty("IsDetail")]
		public bool IsDetail { get; set; }

		public override string ToString()
		{
			return $"{Date} {Topic} {Description}";
		}
	}

	public partial class Response
	{
		public static Response[] FromJson(string json) => JsonConvert.DeserializeObject<Response[]>(json, Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this Response[] self) => JsonConvert.SerializeObject(self, Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var response = Response.FromJson(jsonString);

namespace MediusFlowAPI.Models.AccountingObjectWithLinesForInvoice
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Response
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("BalanceCodeString")]
		public BalanceCodeString BalanceCodeString { get; set; }

		[JsonProperty("DimensionStrings")]
		public DimensionString[] DimensionStrings { get; set; }

		[JsonProperty("CompanyId")]
		public long CompanyId { get; set; }

		[JsonProperty("TransactionCurrencyId")]
		public long TransactionCurrencyId { get; set; }

		[JsonProperty("UseTaxCodes")]
		public bool UseTaxCodes { get; set; }

		[JsonProperty("UseTaxCodesOnHead")]
		public bool UseTaxCodesOnHead { get; set; }

		[JsonProperty("UseTwoTaxIndicators")]
		public bool UseTwoTaxIndicators { get; set; }

		[JsonProperty("RemainingAmounts")]
		public RemainingAmounts RemainingAmounts { get; set; }

		[JsonProperty("IsAuthorizerVisible")]
		public bool IsAuthorizerVisible { get; set; }

		[JsonProperty("IsActionsVisible")]
		public bool IsActionsVisible { get; set; }

		[JsonProperty("IsInvoiceLineNumberVisible")]
		public bool IsInvoiceLineNumberVisible { get; set; }

		[JsonProperty("IsApproveAndRejectVisible")]
		public bool IsApproveAndRejectVisible { get; set; }

		[JsonProperty("IsEditApprovedLinesAllowed")]
		public bool IsEditApprovedLinesAllowed { get; set; }

		[JsonProperty("IsRedistributionVisible")]
		public bool IsRedistributionVisible { get; set; }

		[JsonProperty("TransactionCurrencyCode")]
		public CurrencyCode TransactionCurrencyCode { get; set; }

		[JsonProperty("TotalRounding")]
		public TotalNet TotalRounding { get; set; }

		[JsonProperty("TotalTax")]
		public TotalNet TotalTax { get; set; }

		[JsonProperty("TotalNet")]
		public TotalNet TotalNet { get; set; }

		[JsonProperty("TaxTolerance")]
		public object TaxTolerance { get; set; }

		[JsonProperty("IsWithinTaxTolerance")]
		public bool IsWithinTaxTolerance { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("EntityVersion")]
		public long EntityVersion { get; set; }

		[JsonProperty("ViewId")]
		public Guid ViewId { get; set; }
	}

	public partial class BalanceCodeString
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("AmountInfo")]
		public AmountInfo AmountInfo { get; set; }
	}

	public partial class AmountInfo
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Lines", NullValueHandling = NullValueHandling.Ignore)]
		public Line[] Lines { get; set; }

		[JsonProperty("Net")]
		public TotalNet Net { get; set; }

		[JsonProperty("Tax")]
		public TotalNet Tax { get; set; }

		[JsonProperty("Gross")]
		public TotalNet Gross { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("EntityVersion")]
		public long EntityVersion { get; set; }

		[JsonProperty("ViewId")]
		public Guid ViewId { get; set; }
	}

	public partial class TotalNet
	{
		[JsonProperty("$type")]
		public TypeEnum Type { get; set; }

		[JsonProperty("CurrencyCode")]
		public CurrencyCode CurrencyCode { get; set; }

		[JsonProperty("DisplayValue")]
		public string DisplayValue { get; set; }
	}

	public partial class Line
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Tax")]
		public TotalNet Tax { get; set; }

		[JsonProperty("Dimensions")]
		public Dimensions Dimensions { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("EntityVersion")]
		public long EntityVersion { get; set; }

		[JsonProperty("ViewId")]
		public Guid ViewId { get; set; }
	}

	public partial class Dimensions
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Dimension1")]
		public Dimension1 Dimension1 { get; set; }

		[JsonProperty("Dimension2")]
		public Dimension1 Dimension2 { get; set; }

		[JsonProperty("Dimension3")]
		public Dimension1 Dimension3 { get; set; }

		[JsonProperty("Dimension4")]
		public Dimension1 Dimension4 { get; set; }

		[JsonProperty("Dimension5")]
		public Dimension1 Dimension5 { get; set; }

		[JsonProperty("Dimension6")]
		public Dimension1 Dimension6 { get; set; }

		[JsonProperty("Dimension7")]
		public Dimension1 Dimension7 { get; set; }

		[JsonProperty("Dimension8")]
		public Dimension1 Dimension8 { get; set; }

		[JsonProperty("Dimension9")]
		public Dimension1 Dimension9 { get; set; }

		[JsonProperty("Dimension10")]
		public Dimension1 Dimension10 { get; set; }

		[JsonProperty("Dimension11")]
		public Dimension1 Dimension11 { get; set; }

		[JsonProperty("Dimension12")]
		public Dimension1 Dimension12 { get; set; }

		[JsonProperty("FreeTextDimension1")]
		public Dimension1 FreeTextDimension1 { get; set; }

		[JsonProperty("FreeTextDimension2")]
		public Dimension1 FreeTextDimension2 { get; set; }

		[JsonProperty("FreeTextDimension3")]
		public Dimension1 FreeTextDimension3 { get; set; }

		[JsonProperty("FreeTextDimension4")]
		public Dimension1 FreeTextDimension4 { get; set; }

		[JsonProperty("FreeTextDimension5")]
		public Dimension1 FreeTextDimension5 { get; set; }
	}

	public partial class Dimension1
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Value")]
		public Value Value { get; set; }

		[JsonProperty("IsFixed", NullValueHandling = NullValueHandling.Ignore)]
		public bool? IsFixed { get; set; }

		[JsonProperty("IsReadOnly")]
		public bool IsReadOnly { get; set; }

		[JsonProperty("Errors")]
		public object[] Errors { get; set; }

		[JsonProperty("Messages")]
		public object[] Messages { get; set; }
	}

	public partial class Value
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("Value")]
		[JsonConverter(typeof(ParseStringConverter))]
		public long ValueValue { get; set; }

		[JsonProperty("Description")]
		public string Description { get; set; }
	}

	public partial class DimensionString
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("AmountInfo")]
		public AmountInfo AmountInfo { get; set; }

		[JsonProperty("InvoiceLineNumber")]
		public long? InvoiceLineNumber { get; set; }

		[JsonProperty("LineNumber")]
		public long LineNumber { get; set; }

		[JsonProperty("Dimensions")]
		public Dimensions Dimensions { get; set; }

		[JsonProperty("IsEditable")]
		public bool IsEditable { get; set; }

		[JsonProperty("IsEnabled")]
		public bool IsEnabled { get; set; }

		[JsonProperty("CanRedistributeManually")]
		public bool CanRedistributeManually { get; set; }

		[JsonProperty("IsEditApprovedLinesAllowed")]
		public bool IsEditApprovedLinesAllowed { get; set; }

		[JsonProperty("AccrualInfo")]
		public object AccrualInfo { get; set; }

		[JsonProperty("Tag")]
		public object Tag { get; set; }

		[JsonProperty("TaskItems")]
		public TaskItem[] TaskItems { get; set; }

		[JsonProperty("DeviationViewId")]
		public object DeviationViewId { get; set; }

		[JsonProperty("DeliveryLines")]
		public object[] DeliveryLines { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("EntityVersion")]
		public long EntityVersion { get; set; }

		[JsonProperty("ViewId")]
		public Guid ViewId { get; set; }
	}

	public partial class TaskItem
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("EntityVersion")]
		public long EntityVersion { get; set; }

		[JsonProperty("IsApproved")]
		public bool IsApproved { get; set; }

		[JsonProperty("AuthorizerId")]
		public long AuthorizerId { get; set; }

		[JsonProperty("AuthorizedTimestamp")]
		public object AuthorizedTimestamp { get; set; }

		[JsonProperty("AuthorizerName")]
		public object AuthorizerName { get; set; }

		[JsonProperty("IsActive")]
		public bool IsActive { get; set; }

		[JsonProperty("IsRejected")]
		public bool IsRejected { get; set; }

		[JsonProperty("DistributeTo")]
		public DistributeTo DistributeTo { get; set; }

		[JsonProperty("ReceivingRole")]
		public ReceivingRole ReceivingRole { get; set; }

		[JsonProperty("CanApprove")]
		public bool CanApprove { get; set; }

		[JsonProperty("CanReject")]
		public bool CanReject { get; set; }

		[JsonProperty("CanRedistribute")]
		public bool CanRedistribute { get; set; }

		[JsonProperty("CanRedistributeApprovedOrRejectedCodeStrings")]
		public bool CanRedistributeApprovedOrRejectedCodeStrings { get; set; }

		[JsonProperty("CanRemove")]
		public bool CanRemove { get; set; }

		[JsonProperty("TaskItemErrors")]
		public object[] TaskItemErrors { get; set; }

		[JsonProperty("CodingErrors")]
		public object[] CodingErrors { get; set; }

		[JsonProperty("ExceedsLimit")]
		public bool ExceedsLimit { get; set; }

		[JsonProperty("ViewId")]
		public Guid ViewId { get; set; }

		[JsonProperty("Amount")]
		public TotalNet Amount { get; set; }

		[JsonProperty("ShouldSkipInHistory")]
		public bool ShouldSkipInHistory { get; set; }

		[JsonProperty("IsDistributedOrDelegatedToCurrentUser")]
		public bool IsDistributedOrDelegatedToCurrentUser { get; set; }
	}

	public partial class DistributeTo
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("Name")]
		public string Name { get; set; }

		[JsonProperty("Username")]
		public object Username { get; set; }

		[JsonProperty("IsRole")]
		public bool IsRole { get; set; }
	}

	public partial class ReceivingRole
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("Id")]
		public long Id { get; set; }

		[JsonProperty("OwnerId")]
		public object OwnerId { get; set; }

		[JsonProperty("AssigneeName")]
		public string AssigneeName { get; set; }
	}

	public partial class RemainingAmounts
	{
		[JsonProperty("$type")]
		public string Type { get; set; }

		[JsonProperty("CodedNet")]
		public TotalNet CodedNet { get; set; }

		[JsonProperty("CodedTax")]
		public TotalNet CodedTax { get; set; }

		[JsonProperty("CodedGross")]
		public TotalNet CodedGross { get; set; }

		[JsonProperty("RemainingGross")]
		public TotalNet RemainingGross { get; set; }

		[JsonProperty("IsBalanced")]
		public bool IsBalanced { get; set; }

		[JsonProperty("TotalRemainingNet")]
		public TotalNet TotalRemainingNet { get; set; }

		[JsonProperty("TotalRemainingTax")]
		public TotalNet TotalRemainingTax { get; set; }

		[JsonProperty("TotalTax")]
		public TotalNet TotalTax { get; set; }

		[JsonProperty("TotalEnteredTax")]
		public TotalNet TotalEnteredTax { get; set; }

		[JsonProperty("IsTaxBalanced")]
		public bool IsTaxBalanced { get; set; }

		[JsonProperty("IsWithinTaxTolerance")]
		public bool IsWithinTaxTolerance { get; set; }
	}

	public enum CurrencyCode { Sek };

	public enum TypeEnum { MediusCoreDtOsAmountDtoMediusCoreCommon };

	public partial class Response
	{
		public static Response FromJson(string json) => JsonConvert.DeserializeObject<Response>(json, Converter.Settings);
	}

	public static class Serialize
	{
		public static string ToJson(this Response self) => JsonConvert.SerializeObject(self, Converter.Settings);
	}

	internal static class Converter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				TypeEnumConverter.Singleton,
				CurrencyCodeConverter.Singleton,
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}

	internal class TypeEnumConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			if (value == "Medius.Core.DTOs.AmountDto, Medius.Core.Common")
			{
				return TypeEnum.MediusCoreDtOsAmountDtoMediusCoreCommon;
			}
			throw new Exception("Cannot unmarshal type TypeEnum");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (TypeEnum)untypedValue;
			if (value == TypeEnum.MediusCoreDtOsAmountDtoMediusCoreCommon)
			{
				serializer.Serialize(writer, "Medius.Core.DTOs.AmountDto, Medius.Core.Common");
				return;
			}
			throw new Exception("Cannot marshal type TypeEnum");
		}

		public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
	}

	internal class CurrencyCodeConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(CurrencyCode) || t == typeof(CurrencyCode?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			if (value == "SEK")
			{
				return CurrencyCode.Sek;
			}
			throw new Exception("Cannot unmarshal type CurrencyCode");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (CurrencyCode)untypedValue;
			if (value == CurrencyCode.Sek)
			{
				serializer.Serialize(writer, "SEK");
				return;
			}
			throw new Exception("Cannot marshal type CurrencyCode");
		}

		public static readonly CurrencyCodeConverter Singleton = new CurrencyCodeConverter();
	}

	internal class ParseStringConverter : JsonConverter
	{
		public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

		public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
		{
			if (reader.TokenType == JsonToken.Null) return null;
			var value = serializer.Deserialize<string>(reader);
			long l;
			if (Int64.TryParse(value, out l))
			{
				return l;
			}
			throw new Exception("Cannot unmarshal type long");
		}

		public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
		{
			if (untypedValue == null)
			{
				serializer.Serialize(writer, null);
				return;
			}
			var value = (long)untypedValue;
			serializer.Serialize(writer, value.ToString());
			return;
		}

		public static readonly ParseStringConverter Singleton = new ParseStringConverter();
	}
}

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var request = Request.FromJson(jsonString);

namespace MediusFlowAPI.Models.AccountingObjectWithLinesForInvoice
{
	using System;
	using System.Collections.Generic;

	using System.Globalization;
	using Newtonsoft.Json;
	using Newtonsoft.Json.Converters;

	public partial class Request
	{
		[JsonProperty("invoiceId")]
		public long InvoiceId { get; set; }

		[JsonProperty("documentContext")]
		public DocumentContext DocumentContext { get; set; }
	}

	public partial class DocumentContext
	{
		[JsonProperty("WorkflowStepName")]
		public string WorkflowStepName { get; set; }

		[JsonProperty("DocumentTypeName")]
		public string DocumentTypeName { get; set; }

		[JsonProperty("DocumentId")]
		public long DocumentId { get; set; }

		[JsonProperty("IsInTaskHandling")]
		public Is IsInTaskHandling { get; set; }

		[JsonProperty("IsDraft")]
		public Is IsDraft { get; set; }

		[JsonProperty("IsInEDI")]
		public Is IsInEdi { get; set; }

		[JsonProperty("IsInCreate")]
		public Is IsInCreate { get; set; }

		[JsonProperty("IsInEdit")]
		public Is IsInEdit { get; set; }

		[JsonProperty("IsInArchive")]
		public Is IsInArchive { get; set; }

		[JsonProperty("IsInError")]
		public Is IsInError { get; set; }

		[JsonProperty("IsInvalidated")]
		public Is IsInvalidated { get; set; }

		[JsonProperty("IsInDistribute")]
		public Is IsInDistribute { get; set; }

		[JsonProperty("IsInWorkflowStep")]
		public Is IsInWorkflowStep { get; set; }

		[JsonProperty("IsInCancelPostMessage")]
		public Is IsInCancelPostMessage { get; set; }
	}

	public partial class Is
	{
	}

	//public partial class Request
	//{
	//	public static Request FromJson(string json) => JsonConvert.DeserializeObject<Request>(json, Converter.Settings);
	//}

	//public static class Serialize
	//{
	//	public static string ToJson(this Request self) => JsonConvert.SerializeObject(self, Converter.Settings);
	//}

	//internal static class Converter
	//{
	//	public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
	//	{
	//		MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
	//		DateParseHandling = DateParseHandling.None,
	//		Converters =
	//		{
	//			new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
	//		},
	//	};
	//}
}
